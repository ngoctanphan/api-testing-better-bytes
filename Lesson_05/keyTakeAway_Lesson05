## **üìöLesson 05: Postman Advanced (Part 2) - API Documentation**

### üöÄ 1. Variable Level (Scope)

### üéØ M·ª•c ti√™u:

- Hi·ªÉu c√°c lo·∫°i ph·∫°m vi bi·∫øn (**Variable Scopes**) trong Postman.
- S·ª≠ d·ª•ng bi·∫øn hi·ªáu qu·∫£ trong t·ª´ng t√¨nh hu·ªëng.

### üîç N·ªôi dung ch√≠nh:

- **üîπ Gi·ªõi thi·ªáu v·ªÅ bi·∫øn trong Postman**: Gi√∫p t√°i s·ª≠ d·ª•ng d·ªØ li·ªáu nh∆∞ **URL, token, input values** trong c√°c request.
- **üìå C√°c m·ª©c ƒë·ªô ph·∫°m vi (Scopes) c·ªßa bi·∫øn**:
    1. üåç **Global Variables**: Bi·∫øn to√†n c·ª•c, c√≥ th·ªÉ truy c·∫≠p t·ª´ m·ªçi request.
    2. üìÇ **Collection Variables**: Bi·∫øn thu·ªôc m·ªôt **collection**, d√πng chung trong collection ƒë√≥.
    3. üå± **Environment Variables**: Bi·∫øn thu·ªôc v·ªÅ m√¥i tr∆∞·ªùng (**dev, staging, production**).
    4. üìÑ **Data Variables**: Bi·∫øn t·ª´ **file d·ªØ li·ªáu** khi ch·∫°y collection.
    5. ‚ö° **Local Variables**: Bi·∫øn t·∫°m th·ªùi, ch·ªâ t·ªìn t·∫°i trong m·ªôt request ho·∫∑c script.
- üèÜ **Th·ª© t·ª± ∆∞u ti√™n c·ªßa bi·∫øn**: **Local > Data > Environment > Collection > Global**.

### üõ† V√≠ d·ª•:

1. **T·∫°o m·ªôt Global Variable** `username = admin@betterbytesvn.com` ‚Üí S·ª≠ d·ª•ng trong request.
2. **T·∫°o Collection Variable** `username = librarian@betterbytesvn.com` ‚Üí Quan s√°t gi√° tr·ªã b·ªã override.
3. **T·∫°o Environment Variable** `username = user@betterbytesvn.com` (cho m√¥i tr∆∞·ªùng Dev) ‚Üí Quan s√°t s·ª± thay th·∫ø gi√° tr·ªã.
4. **Ch·∫°y request v·ªõi file CSV:**

```
username,password
hoai,123@123A
tan,123@123A
tu,123@123A
nga,123@123A
uyen,123@123A
vu,123@123A
linh,123@123A
thanh,123@123A
quan,123@123A
```

1. **Run collection authentication**, s·ª≠ d·ª•ng file CSV tr√™n ƒë·ªÉ ƒëƒÉng k√Ω t√†i kho·∫£n h√†ng lo·∫°t.

### üé≤ Postman Dynamic Variables

- C√°c bi·∫øn **random** h·ªó tr·ª£ ki·ªÉm th·ª≠ API: https://learning.postman.com/docs/tests-and-scripts/write-scripts/variables-list/

---

## üñ•Ô∏è 2. Postman Scripts - K·ªãch b·∫£n trong Postman

### üéØ M·ª•c ti√™u:

- Hi·ªÉu c√°ch s·ª≠ d·ª•ng **script** ƒë·ªÉ t·ª± ƒë·ªông h√≥a trong Postman.
- N·∫Øm r√µ **Pre-request Script** v√† **Post-request Script**.

### üõ† N·ªôi dung ch√≠nh:

- **Postman h·ªó tr·ª£ JavaScript** ƒë·ªÉ t√πy ch·ªânh request:
    1. **üìù Pre-request Script**: Ch·∫°y **tr∆∞·ªõc** khi request g·ª≠i ƒëi.
    2. **‚úÖ Post-request Script**: Ch·∫°y **sau** khi nh·∫≠n response.

---

## ‚ö° 2.1. Pre-request Script

### üîç M√¥ t·∫£:

- **Ch·∫°y tr∆∞·ªõc khi g·ª≠i request**, d√πng ƒë·ªÉ **t·∫°o d·ªØ li·ªáu, thi·∫øt l·∫≠p bi·∫øn, ki·ªÉm tra ƒëi·ªÅu ki·ªán**.

### üîπ ·ª®ng d·ª•ng:

‚úÖ **Sinh gi√° tr·ªã ƒë·ªông** (*timestamp, token*)
‚úÖ **Thi·∫øt l·∫≠p bi·∫øn** (global, collection, environment)
‚úÖ **G·ª≠i request ƒë·ªÉ l·∫•y token tr∆∞·ªõc request ch√≠nh**

### üõ† C√°c ƒë·ªëi t∆∞·ª£ng quan tr·ªçng:

- `pm.variables` ‚Üí Qu·∫£n l√Ω bi·∫øn (global, collection, environment).
- `pm.environment` ‚Üí Thao t√°c v·ªõi bi·∫øn m√¥i tr∆∞·ªùng.
- `pm.collectionVariables` ‚Üí Thao t√°c v·ªõi bi·∫øn collection.
- `pm.sendRequest` ‚Üí G·ª≠i request b·ªï sung.

### üìå V√≠ d·ª•:

- **T·∫°o timestamp ƒë·ªông v√† l∆∞u v√†o bi·∫øn m√¥i tr∆∞·ªùng**

```jsx
const timestamp = new Date().toISOString();
pm.environment.set("current_timestamp", timestamp);
console.log("Timestamp generated:", timestamp);
```

- **G·ª≠i request l·∫•y token tr∆∞·ªõc request ch√≠nh**

```jsx
pm.sendRequest({
    url: "https://api.example.com/auth",
    method: "POST",
    header: {"Content-Type": "application/json"},
    body: {
        mode: "raw",
        raw: JSON.stringify({username: "user", password: "pass"})
    }
}, (err, res) => {
    if (!err) {
        const token = res.json().access_token;
        pm.environment.set("auth_token", token);
    }
});
```

### üéØ Th·ª±c h√†nh:

1. **T·∫°o request GET** ƒë·∫øn `https://jsonplaceholder.typicode.com/posts`
2. **Vi·∫øt Pre-request Script** ƒë·ªÉ t·∫°o `random_id` (1 - 100)

```jsx
const randomId = Math.floor(Math.random() * 100) + 1;
pm.environment.set("random_id", randomId);

```

1. **S·ª≠ d·ª•ng bi·∫øn trong URL**: `https://jsonplaceholder.typicode.com/posts/{{random_id}}`
2. **G·ª≠i request v√† quan s√°t response**

---

## ‚úÖ 2.2. Post-request Script (Tests)

### üîç M√¥ t·∫£:

- **Ch·∫°y sau khi nh·∫≠n response**, gi√∫p ki·ªÉm tra, l∆∞u d·ªØ li·ªáu ho·∫∑c x·ª≠ l√Ω logic ti·∫øp theo.

### üîπ ·ª®ng d·ª•ng:

‚úÖ **Ki·ªÉm tra response** (status code, d·ªØ li·ªáu tr·∫£ v·ªÅ)
‚úÖ **L∆∞u d·ªØ li·ªáu t·ª´ response v√†o bi·∫øn**
‚úÖ **T·∫°o b√°o c√°o k·∫øt qu·∫£ ki·ªÉm th·ª≠**

### üõ† C√°c ƒë·ªëi t∆∞·ª£ng quan tr·ªçng:

- `pm.response` ‚Üí Truy c·∫≠p response (status, JSON, text,...)
- `pm.test` ‚Üí Vi·∫øt ki·ªÉm th·ª≠ (test assertions)
- `pm.expect` ‚Üí So s√°nh k·∫øt qu·∫£ mong ƒë·ª£i
- `pm.visualizer` ‚Üí Hi·ªÉn th·ªã d·ªØ li·ªáu tr·ª±c quan

### üìå V√≠ d·ª•:

- **Ki·ªÉm tra status code v√† l∆∞u d·ªØ li·ªáu t·ª´ response**

```jsx
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

const response = pm.response.json();
pm.environment.set("user_id", response.id);
console.log("User ID saved:", response.id);

```

- **Ki·ªÉm tra response c√≥ ch·ª©a field "email"**

```jsx
pm.test("Response contains name field", function () {
    const response = pm.response.json();
    pm.expect(response).to.have.property("name");
});

```

### üéØ Th·ª±c h√†nh:

1. **T·∫°o request GET** ƒë·∫øn `https://jsonplaceholder.typicode.com/users/1`
2. **Vi·∫øt Post-request Script** ƒë·ªÉ:
    - ‚úÖ Ki·ªÉm tra status code l√† `200`
    - ‚úÖ L∆∞u `id` t·ª´ response v√†o bi·∫øn m√¥i tr∆∞·ªùng `user_id`
    - ‚úÖ Ki·ªÉm tra response c√≥ ch·ª©a tr∆∞·ªùng `email`

```jsx
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
});

const response = pm.response.json();
pm.environment.set("user_id", response.id);

pm.test("Response has email", function () {
    pm.expect(response).to.have.property("email");
});
```

---

## 2.3. So s√°nh Pre-request v√† Post-response Script

| Ti√™u ch√≠ | Pre-request Script üìù | Post-respone Script ‚úÖ |
| --- | --- | --- |
| Th·ªùi ƒëi·ªÉm ch·∫°y | Tr∆∞·ªõc khi g·ª≠i request ‚è≥ | Sau khi nh·∫≠n response üì© |
| M·ª•c ƒë√≠ch ch√≠nh | Chu·∫©n b·ªã d·ªØ li·ªáu, thi·∫øt l·∫≠p bi·∫øn üîÑ | Ki·ªÉm tra response, l∆∞u d·ªØ li·ªáu üóÉÔ∏è |
| V√≠ d·ª• s·ª≠ d·ª•ng | L·∫•y token, t·∫°o timestamp üîë | Ki·ªÉm tra status, tr·ª±c quan h√≥a d·ªØ li·ªáu üìä |

---

## 2.4. X·ª≠ l√Ω chu·ªói request li√™n ti·∫øp (Chaining Requests) üîó

### üéØ M·ª•c ti√™u:

‚úîÔ∏è Hi·ªÉu c√°ch s·ª≠ d·ª•ng script trong Postman ƒë·ªÉ g·ª≠i nhi·ªÅu request n·ªëi ti·∫øp nhau, trong ƒë√≥ request sau ph·ª• thu·ªôc v√†o k·∫øt qu·∫£ c·ªßa request tr∆∞·ªõc.
‚úîÔ∏è T·ª± ƒë·ªông h√≥a quy tr√¨nh l√†m vi·ªác v·ªõi API ph·ª©c t·∫°p.

### üìå N·ªôi dung ch√≠nh:

‚úÖ **Chaining Requests l√† g√¨?**: K·ªπ thu·∫≠t g·ª≠i m·ªôt chu·ªói request, trong ƒë√≥ d·ªØ li·ªáu t·ª´ response c·ªßa request tr∆∞·ªõc ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ g·ª≠i request ti·∫øp theo.
‚úÖ **C√¥ng c·ª• ch√≠nh:**

- `pm.sendRequest` üöÄ: G·ª≠i request b·ªï sung t·ª´ script (d√πng trong Pre-request ho·∫∑c Post-request Script).
- Bi·∫øn (`environment/collection`) ƒë·ªÉ truy·ªÅn d·ªØ li·ªáu gi·ªØa c√°c request üîÑ.

### üõ†Ô∏è ·ª®ng d·ª•ng:

- üìå L·∫•y token x√°c th·ª±c tr∆∞·ªõc, sau ƒë√≥ d√πng token ƒë·ªÉ g·ªçi API kh√°c.
- üìå T·∫°o t√†i nguy√™n (POST), sau ƒë√≥ l·∫•y chi ti·∫øt t√†i nguy√™n ƒë√≥ (GET).

### üîÑ Quy tr√¨nh c∆° b·∫£n:

1Ô∏è‚É£ G·ª≠i request ƒë·∫ßu ti√™n (th∆∞·ªùng trong Pre-request ho·∫∑c Post-request Script).
2Ô∏è‚É£ L·∫•y d·ªØ li·ªáu t·ª´ response (v√≠ d·ª•: token, ID).
3Ô∏è‚É£ S·ª≠ d·ª•ng d·ªØ li·ªáu ƒë·ªÉ g·ª≠i request ti·∫øp theo.

---

## üèÜ V√≠ d·ª•:

### üìå T√¨nh hu·ªëng: G·ªçi API ƒëƒÉng nh·∫≠p ƒë·ªÉ l·∫•y token, sau ƒë√≥ d√πng token ƒë·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng.

### üìú Script trong **Pre-request Script** (l·∫•y token):

```jsx
pm.sendRequest({
    url: "https://api.example.com/login",
    method: "POST",
    header: {"Content-Type": "application/json"},
    body: {
        mode: "raw",
        raw: JSON.stringify({username: "admin", password: "pass123"})
    }
}, (err, res) => {
    if (!err && res.code === 200) {
        const token = res.json().access_token;
        pm.environment.set("auth_token", token);
        console.log("Token received:", token);
    } else {
        console.log("Error fetching token:", err || res.status);
    }
});
```

üìå **Request ch√≠nh:**

```
GET https://api.example.com/users
Header: Authorization: Bearer {{auth_token}}
```

üìå **K·∫øt qu·∫£:** Request ch√≠nh s·∫Ω s·ª≠ d·ª•ng token t·ª´ bi·∫øn `auth_token` ƒë·ªÉ truy c·∫≠p API.

### üìú Script trong **Post-request Script** (chu·ªói nhi·ªÅu b∆∞·ªõc):

```jsx
// B∆∞·ªõc 1: L·∫•y user_id t·ª´ response
const userId = pm.response.json().id;
pm.environment.set("new_user_id", userId);

// B∆∞·ªõc 2: G·ª≠i request GET ƒë·ªÉ l·∫•y th√¥ng tin user
pm.sendRequest({
    url: `https://api.example.com/users/${userId}`,
    method: "GET",
    header: {"Authorization": "Bearer " + pm.environment.get("auth_token")}
}, (err, res) => {
    if (!err && res.code === 200) {
        console.log("User details:", res.json());
    } else {
        console.log("Error fetching user:", err || res.status);
    }
});
```

---

## üéØ Th·ª±c h√†nh:

### üîπ Chu·∫©n b·ªã:

1Ô∏è‚É£ **T·∫°o m·ªôt collection** v·ªõi hai request:

- **Request 1:** POST ƒë·∫øn `https://jsonplaceholder.typicode.com/posts` ƒë·ªÉ t·∫°o b√†i vi·∫øt m·ªõi.

```json
{
  "title": "Test Post",
  "body": "This is a test",
  "userId": 1
}
```

- **Request 2:** GET ƒë·∫øn `https://jsonplaceholder.typicode.com/posts/{{post_id}}`.

2Ô∏è‚É£ **Vi·∫øt script trong Post-request Script c·ªßa Request 1:**

```jsx
pm.test("Post created successfully", function () {
    pm.response.to.have.status(201);
});

const postId = pm.response.json().id;
pm.environment.set("post_id", postId);
console.log("New Post ID:", postId);

pm.sendRequest({
    url: `https://jsonplaceholder.typicode.com/posts/${postId}`,
    method: "GET"
}, (err, res) => {
    if (!err && res.code === 200) {
        console.log("Post details:", res.json());
    } else {
        console.log("Error:", err || res.status);
    }
});
```

3Ô∏è‚É£ **Ki·ªÉm tra:**
‚úîÔ∏è G·ª≠i **Request 1**, quan s√°t **console log** ƒë·ªÉ xem d·ªØ li·ªáu t·ª´ c·∫£ hai request.
‚úîÔ∏è G·ª≠i **Request 2** ƒë·ªÉ x√°c nh·∫≠n bi·∫øn `post_id` ho·∫°t ƒë·ªông ƒë√∫ng.

---

## üî• C√°ch m·ªü r·ªông:

üîπ **S·ª≠ d·ª•ng Collection Runner**: K·∫øt h·ª£p chaining v·ªõi file d·ªØ li·ªáu ƒë·ªÉ ch·∫°y chu·ªói request cho nhi·ªÅu b·ªô d·ªØ li·ªáu.
üîπ **X·ª≠ l√Ω l·ªói t·ªët h∆°n**:

```jsx
pm.sendRequest(..., (err, res) => {
    if (err || res.code !== 200) {
        pm.expect.fail("Request failed: " + (err || res.status));
    }
    // Ti·∫øp t·ª•c x·ª≠ l√Ω
});
```

---

## üéì L∆∞u √Ω khi gi·∫£ng d·∫°y:

‚úÖ **Gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc**: Chia nh·ªè quy tr√¨nh (l·∫•y d·ªØ li·ªáu ‚Üí l∆∞u bi·∫øn ‚Üí g·ª≠i request ti·∫øp theo) ƒë·ªÉ h·ªçc vi√™n d·ªÖ hi·ªÉu.
‚úÖ **Th·ª±c h√†nh l√† tr·ªçng t√¢m**: Sau m·ªói v√≠ d·ª•, y√™u c·∫ßu h·ªçc vi√™n t·ª± vi·∫øt script ƒë·ªÉ hi·ªÉu c√°ch ho·∫°t ƒë·ªông.
‚úÖ **D√πng console.log**: Khuy·∫øn kh√≠ch h·ªçc vi√™n s·ª≠ d·ª•ng `console.log` ƒë·ªÉ debug v√† ki·ªÉm tra gi√° tr·ªã.
‚úÖ **API c√¥ng khai**: S·ª≠ d·ª•ng API nh∆∞ `jsonplaceholder.typicode.com` ƒë·ªÉ th·ª≠ nghi·ªám an to√†n.

---

## 3. Visualization - Tr·ª±c quan h√≥a d·ªØ li·ªáu trong Postman üìä

## M·ª•c ti√™u üéØ

- H·ªçc c√°ch hi·ªÉn th·ªã d·ªØ li·ªáu response d∆∞·ªõi d·∫°ng tr·ª±c quan (b·∫£ng, bi·ªÉu ƒë·ªì).
- TƒÉng kh·∫£ nƒÉng ph√¢n t√≠ch k·∫øt qu·∫£ API.

## N·ªôi dung ch√≠nh üìå

### 3.1. Visualization l√† g√¨? üñºÔ∏è

- T√≠nh nƒÉng cho ph√©p hi·ªÉn th·ªã d·ªØ li·ªáu t·ª´ response theo c√°ch d·ªÖ ƒë·ªçc h∆°n b·∫±ng c√°ch s·ª≠ d·ª•ng script.
- **C√¥ng c·ª•**: S·ª≠ d·ª•ng tab "Visualize" trong Postman, k·∫øt h·ª£p v·ªõi script trong tab "Tests".
- **Ng√¥n ng·ªØ h·ªó tr·ª£**: JavaScript (d√πng th∆∞ vi·ªán nh∆∞ Handlebars ƒë·ªÉ t·∫°o HTML).

### 3.2. V√≠ d·ª• üìù

- **G·ª≠i request GET** ƒë·∫øn API tr·∫£ v·ªÅ d·ªØ li·ªáu order:
`https://bblib-dev-api.betterbytesvn.cloud/static/json/complex-data.json`
- **Trong tab "Tests"**, th√™m script:
    
    ```jsx
    var template = `
      <style>
          table { width: 100%; border-collapse: collapse; }
          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
          th { background-color: #f2f2f2; }
      </style>
      <table>
          <tr>
              <th>Order ID</th>
              <th>Customer Name</th>
              <th>Total Amount</th>
              <th>Status</th>
          </tr>
          {{#each orders}}
          <tr>
              <td>{{order_id}}</td>
              <td>{{customer.name}}</td>
              <td>{{total_amount}}</td>
              <td>{{status}}</td>
          </tr>
          {{/each}}
      </table>
    `;
    
    const responseData = pm.response.json();
    pm.visualizer.set(template, { orders: responseData });
    ```
    
- **K·∫øt qu·∫£**: Response hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng b·∫£ng trong tab "Visualize".

## 3.3. N√™n Visualize D·ªØ li·ªáu th·∫ø n√†o trong Postman? ü§î

### C√°c y·∫øu t·ªë c·∫ßn xem x√©t üìå

- **Lo·∫°i d·ªØ li·ªáu**: ƒê·ªãnh t√≠nh (chu·ªói, tr·∫°ng th√°i) hay ƒë·ªãnh l∆∞·ª£ng (s·ªë li·ªáu, gi√° tr·ªã).
- **M·ª•c ƒë√≠ch**: So s√°nh, t·ªïng h·ª£p, hay hi·ªÉn th·ªã chi ti·∫øt.
- **S·ªë l∆∞·ª£ng b·∫£n ghi**: Nhi·ªÅu b·∫£n ghi c·∫ßn t·ªïng h·ª£p hay √≠t b·∫£n ghi c·∫ßn chi ti·∫øt.

### 3.4. V·ªõi lo·∫°i d·ªØ li·ªáu n√†o, d√πng ki·ªÉu visualize th·∫ø n√†o? üìä

### üîπ D·∫°ng Table (B·∫£ng) üóÇÔ∏è

**Ph√π h·ª£p v·ªõi:**

- D·ªØ li·ªáu ƒë·ªãnh t√≠nh ho·∫∑c h·ªón h·ª£p (chu·ªói, s·ªë, tr·∫°ng th√°i).
- Hi·ªÉn th·ªã chi ti·∫øt t·ª´ng b·∫£n ghi ho·∫∑c danh s√°ch ƒë·∫ßy ƒë·ªß.
- D·ªØ li·ªáu c√≥ c·∫•u tr√∫c l·ªìng nhau (nested) c·∫ßn hi·ªÉn th·ªã ph√¢n c·∫•p.

**V√≠ d·ª• t·ª´ file JSON:**

- Hi·ªÉn th·ªã danh s√°ch ƒë∆°n h√†ng v·ªõi c√°c c·ªôt: Order ID, Customer Name, Total Amount, Status.
- Hi·ªÉn th·ªã chi ti·∫øt s·∫£n ph·∫©m (items) trong m·ªói ƒë∆°n h√†ng.

‚úÖ **∆Øu ƒëi·ªÉm**: D·ªÖ ƒë·ªçc, ph√π h·ª£p khi c·∫ßn xem to√†n b·ªô th√¥ng tin.
‚ùå **Nh∆∞·ª£c ƒëi·ªÉm**: Kh√¥ng hi·ªáu qu·∫£ khi d·ªØ li·ªáu qu√° l·ªõn ho·∫∑c c·∫ßn so s√°nh xu h∆∞·ªõng.

### üîπ D·∫°ng Chart (Bi·ªÉu ƒë·ªì) üìàüìâ

**Ph√π h·ª£p v·ªõi:**

- D·ªØ li·ªáu ƒë·ªãnh l∆∞·ª£ng (s·ªë li·ªáu nh∆∞ gi√° tr·ªã, s·ªë l∆∞·ª£ng).
- T·ªïng h·ª£p v√† so s√°nh d·ªØ li·ªáu (v√≠ d·ª•: t·ªïng doanh thu theo tr·∫°ng th√°i, s·ªë l∆∞·ª£ng s·∫£n ph·∫©m b√°n ra).
- D·ªØ li·ªáu c·∫ßn ph√¢n t√≠ch xu h∆∞·ªõng ho·∫∑c t·ª∑ l·ªá.

**V√≠ d·ª• t·ª´ file JSON:**

- **Bi·ªÉu ƒë·ªì c·ªôt**: T·ªïng `total_amount` theo `status` (Shipped, Pending, Delivered, Processing).
- **Bi·ªÉu ƒë·ªì tr√≤n**: Ph√¢n b·ªë s·ªë l∆∞·ª£ng ƒë∆°n h√†ng theo qu·ªëc gia c·ªßa kh√°ch h√†ng (`customer.contact.country`).

‚úÖ **∆Øu ƒëi·ªÉm**: Tr·ª±c quan, d·ªÖ th·∫•y xu h∆∞·ªõng ho·∫∑c t·ª∑ l·ªá.
‚ùå **Nh∆∞·ª£c ƒëi·ªÉm**: Kh√¥ng hi·ªÉn th·ªã chi ti·∫øt t·ª´ng b·∫£n ghi, c·∫ßn th∆∞ vi·ªán b√™n ngo√†i (nh∆∞ Chart.js).

### 3.5. Template m·∫´u t∆∞∆°ng ·ª©ng üèóÔ∏è

### üìã Template 1: Table - Danh s√°ch ƒë∆°n h√†ng c∆° b·∫£n

**M·ª•c ƒë√≠ch**: Hi·ªÉn th·ªã to√†n b·ªô th√¥ng tin ƒë∆°n h√†ng d∆∞·ªõi d·∫°ng b·∫£ng.

```jsx
var template = `
    <style>
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
    <table>
        <tr>
            <th>Order ID</th>
            <th>Customer Name</th>
            <th>Total Amount</th>
            <th>Status</th>
            <th>Order Date</th>
        </tr>
        {{#each orders}}
        <tr>
            <td>{{order_id}}</td>
            <td>{{customer.name}}</td>
            <td>{{total_amount}}</td>
            <td>{{status}}</td>
            <td>{{order_date}}</td>
        </tr>
        {{/each}}
    </table>
`;

const responseData = pm.response.json();
pm.visualizer.set(template, { orders: responseData });
```

‚úÖ **K·∫øt qu·∫£**: B·∫£ng hi·ªÉn th·ªã 22 ƒë∆°n h√†ng v·ªõi c√°c c·ªôt c∆° b·∫£n.

---

## 4. Body Data Type - C√°c lo·∫°i d·ªØ li·ªáu trong Body c·ªßa Request üìë

## M·ª•c ti√™u üéØ

- Hi·ªÉu s·ª± kh√°c bi·ªát gi·ªØa c√°c lo·∫°i d·ªØ li·ªáu trong ph·∫ßn Body c·ªßa request.
- Bi·∫øt khi n√†o n√™n s·ª≠ d·ª•ng t·ª´ng lo·∫°i.

## N·ªôi dung ch√≠nh üìå

### 4.1. Form-data üìù

- **M√¥ t·∫£**: D√πng ƒë·ªÉ g·ª≠i d·ªØ li·ªáu d·∫°ng key-value, h·ªó tr·ª£ c·∫£ file upload.
- **·ª®ng d·ª•ng**: T·∫£i file l√™n server, g·ª≠i bi·ªÉu m·∫´u HTML c√≥ file ƒë√≠nh k√®m.
- **V√≠ d·ª•**:
    - `Key: username, Value: john_doe`.
    - `Key: avatar, Value: (ch·ªçn file ·∫£nh)`.

### 4.2. x-www-form-urlencoded üîë

- **M√¥ t·∫£**: D·ªØ li·ªáu d·∫°ng key-value, ƒë∆∞·ª£c m√£ h√≥a URL, kh√¥ng h·ªó tr·ª£ file.
- **·ª®ng d·ª•ng**: G·ª≠i d·ªØ li·ªáu bi·ªÉu m·∫´u ƒë∆°n gi·∫£n (kh√¥ng c√≥ file).
- **V√≠ d·ª•**:
    - `username=john_doe&password=12345` (trong Body).

### 4.3. Binary üìÇ

- **M√¥ t·∫£**: G·ª≠i d·ªØ li·ªáu nh·ªã ph√¢n (file) m√† kh√¥ng c·∫ßn key-value.
- **·ª®ng d·ª•ng**: T·∫£i l√™n file ƒë∆°n l·∫ª (·∫£nh, video, PDF, v.v.).
- **V√≠ d·ª•**:
    - Ch·ªçn m·ªôt file `.png` v√† g·ª≠i request `POST`.

## Th·ª±c h√†nh üí°

- T·∫°o 3 request `POST` ƒë·∫øn `https://postman-echo.com/post`:
    1. **Request 1**: D√πng `form-data` ƒë·ªÉ g·ª≠i `name=John` v√† m·ªôt file ·∫£nh.
    2. **Request 2**: D√πng `x-www-form-urlencoded` ƒë·ªÉ g·ª≠i `name=Jane`.
    3. **Request 3**: D√πng `binary` ƒë·ªÉ g·ª≠i m·ªôt file PDF.
- **Ki·ªÉm tra response** t·ª´ server ƒë·ªÉ hi·ªÉu c√°ch d·ªØ li·ªáu ƒë∆∞·ª£c x·ª≠ l√Ω.

üöÄ *Ti·∫øp t·ª•c kh√°m ph√° Postman v·ªõi c√°c t√≠nh nƒÉng m·∫°nh m·∫Ω h∆°n!*