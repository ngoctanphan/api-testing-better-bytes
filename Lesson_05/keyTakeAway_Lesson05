# Lesson 05: Postman advance (part 2), API doc

# Postman advance
## 1. Variable level (scope)
### Mục tiêu:
- Hiểu các loại phạm vi biến (variable scopes) trong Postman.
- Biết cách sử dụng biến phù hợp với từng tình huống.

### Nội dung chính:
- **Giới thiệu về biến trong Postman**: Biến giúp tái sử dụng dữ liệu (URL, token, giá trị đầu vào, v.v.) trong các request.
- **Các mức độ phạm vi (scopes)**:
  1. **Global Variables**: Biến toàn cục, có thể truy cập từ mọi request trong Postman.
  2. **Collection Variables**: Biến thuộc về một collection cụ thể, dùng chung cho các request trong collection đó.
  3. **Environment Variables**: Biến thuộc về môi trường (environment), ví dụ: dev, staging, production.
  4. **Data Variables**: Biến từ file dữ liệu khi chạy collection.
  5. **Local Variables**: Biến tạm thời, chỉ tồn tại trong một script hoặc request cụ thể. 

- **Ưu tiên truy cập biến**: Local > Data > Environment > Collection > Global.

### Ví dụ:
- Tạo một **Global Variable** `username` với giá trị `admin@betterbytesvn.com`.
- Send request với giá trị `username` này
- Tạo một **Collection Variable** `username` với giá trị `librarian@betterbytesvn.com`.
- Send request với giá trị `username` này và nhận thấy giá trị bị override bởi collection variable
- Tạo một **Environment Variable** `username` cho môi trường "Dev" với giá trị `user@betterbytesvn.com`.
- Send request với giá trị này và nhận thấy giá trị này bị override bởi environment variable
- Tạo file **csv** với nội dung sau
```csv
username,password
hoai,123@123A
tan,123@123A
tu,123@123A
nga,123@123A
uyen,123@123A
vu,123@123A
linh,123@123A
thanh,123@123A
quan,123@123A
```
- Thực hiện run collection authentication với API register, chọn file csv với data. Quan sát để thấy đăng kí thành công với từng user trong file csv 

### Postman dynamic variables
- Là những variable của postman, sinh ra để random data: https://learning.postman.com/docs/tests-and-scripts/write-scripts/variables-list/

## 2. Postman Scripts - Kịch bản trong Postman
### Mục tiêu:
- Hiểu cách sử dụng script để tự động hóa và tùy chỉnh các request trong Postman.
- Nắm được sự khác biệt giữa **Pre-request Script** và **Post-request Script**, cũng như ứng dụng của chúng.

### Nội dung chính:
- **Giới thiệu về Scripts trong Postman**: Postman hỗ trợ viết script bằng JavaScript để thực thi logic trước hoặc sau khi gửi request.
- **Hai loại script chính**:
  1. **Pre-request Script**: Chạy trước khi request được gửi.
  2. **Post-request Script**: Chạy sau khi nhận được response (trong tab "Tests").

---

### 2.1. Pre-request Script
#### Mô tả:
- Được thực thi trước khi request gửi đi, dùng để chuẩn bị dữ liệu, thiết lập biến, hoặc kiểm tra điều kiện.

#### Ứng dụng:
- Tạo giá trị động (ví dụ: timestamp, token).
- Thiết lập biến môi trường hoặc collection.
- Kiểm tra điều kiện trước khi gửi request.

#### Các đối tượng chính:
- `pm.variables`: Quản lý biến (global, collection, environment).
- `pm.environment`: Thao tác với biến môi trường.
- `pm.collectionVariables`: Thao tác với biến collection.
- `pm.sendRequest`: Gửi request bổ sung (ví dụ: lấy token).

#### Ví dụ:
- Tạo timestamp động và lưu vào biến môi trường:
  ```javascript
  const timestamp = new Date().toISOString();
  pm.environment.set("current_timestamp", timestamp);
  console.log("Timestamp generated:", timestamp);
  ```
- Gửi request để lấy token trước khi chạy request chính:
  ```javascript
  pm.sendRequest({
      url: "https://api.example.com/auth",
      method: "POST",
      header: {"Content-Type": "application/json"},
      body: {
          mode: "raw",
          raw: JSON.stringify({username: "user", password: "pass"})
      }
  }, (err, res) => {
      if (!err) {
          const token = res.json().access_token;
          pm.environment.set("auth_token", token);
      }
  });
  ```

#### Thực hành:
1. Tạo một request GET đến `https://jsonplaceholder.typicode.com/posts`.
2. Trong tab "Pre-request Script", viết script để tạo biến `random_id` với giá trị ngẫu nhiên từ 1 đến 100:
   ```javascript
   const randomId = Math.floor(Math.random() * 100) + 1;
   pm.environment.set("random_id", randomId);
   ```
3. Sử dụng biến trong URL: `https://jsonplaceholder.typicode.com/posts/{{random_id}}`.
4. Gửi request và kiểm tra response.

---

### 2.2. Post-request Script (Tests)
#### Mô tả:
- Được thực thi sau khi nhận response, dùng để kiểm tra kết quả, lưu dữ liệu hoặc xử lý logic tiếp theo.

#### Ứng dụng:
- Kiểm tra response (status code, dữ liệu trả về).
- Lưu dữ liệu từ response vào biến.
- Tạo báo cáo hoặc trực quan hóa (kết hợp với Visualization).

#### Các đối tượng chính:
- `pm.response`: Truy cập dữ liệu response (status, JSON, text, v.v.).
- `pm.test`: Viết các bài kiểm tra (test assertions).
- `pm.expect`: Kiểm tra kỳ vọng (dùng với Chai.js).
- `pm.visualizer`: Hiển thị dữ liệu trực quan.

#### Ví dụ:
- Kiểm tra status code và lưu dữ liệu từ response:
  ```javascript
  pm.test("Status code is 200", function () {
      pm.response.to.have.status(200);
  });

  const response = pm.response.json();
  pm.environment.set("user_id", response.id);
  console.log("User ID saved:", response.id);
  ```
- Kiểm tra dữ liệu trả về:
  ```javascript
  pm.test("Response contains name field", function () {
      const response = pm.response.json();
      pm.expect(response).to.have.property("name");
  });
  ```

#### Thực hành:
1. Tạo request GET đến `https://jsonplaceholder.typicode.com/users/1`.
2. Trong tab "Tests", viết script:
   - Kiểm tra status code là 200.
   - Lưu giá trị `id` từ response vào biến môi trường `user_id`.
   - Kiểm tra response có chứa trường `email`.
   ```javascript
   pm.test("Status code is 200", function () {
       pm.response.to.have.status(200);
   });

   const response = pm.response.json();
   pm.environment.set("user_id", response.id);

   pm.test("Response has email", function () {
       pm.expect(response).to.have.property("email");
   });
   ```
3. Gửi request và kiểm tra kết quả trong tab "Test Results".

---

### 2.3. So sánh Pre-request và Post-request Script:
| **Tiêu chí**           | **Pre-request Script**                  | **Post-request Script**                |
|-------------------------|-----------------------------------------|-----------------------------------------|
| **Thời điểm chạy**     | Trước khi gửi request                  | Sau khi nhận response                  |
| **Mục đích chính**     | Chuẩn bị dữ liệu, thiết lập biến       | Kiểm tra response, lưu dữ liệu         |
| **Ví dụ sử dụng**      | Lấy token, tạo timestamp              | Kiểm tra status, trực quan hóa dữ liệu |

---
### 2.4. Xử lý chuỗi request liên tiếp (Chaining Requests)
#### Mục tiêu:
- Hiểu cách sử dụng script trong Postman để gửi nhiều request nối tiếp nhau, trong đó request sau phụ thuộc vào kết quả của request trước.
- Tự động hóa quy trình làm việc với API phức tạp.

#### Nội dung chính:
- **Chaining Requests là gì?**: Kỹ thuật gửi một chuỗi request, trong đó dữ liệu từ response của request trước được sử dụng để gửi request tiếp theo.
- **Công cụ chính**:
  - `pm.sendRequest`: Gửi request bổ sung từ script (dùng trong Pre-request hoặc Post-request Script).
  - Biến (environment/collection) để truyền dữ liệu giữa các request.
- **Ứng dụng**:
  - Lấy token xác thực trước, sau đó dùng token để gọi API khác.
  - Tạo tài nguyên (POST), sau đó lấy chi tiết tài nguyên đó (GET).
- **Quy trình cơ bản**:
  1. Gửi request đầu tiên (thường trong Pre-request hoặc Post-request Script).
  2. Lấy dữ liệu từ response (ví dụ: token, ID).
  3. Sử dụng dữ liệu để gửi request tiếp theo.

#### Ví dụ:
- **Tình huống**: Gọi API đăng nhập để lấy token, sau đó dùng token để lấy danh sách người dùng.
- **Script trong Pre-request Script** (lấy token):
  ```javascript
  pm.sendRequest({
      url: "https://api.example.com/login",
      method: "POST",
      header: {"Content-Type": "application/json"},
      body: {
          mode: "raw",
          raw: JSON.stringify({username: "admin", password: "pass123"})
      }
  }, (err, res) => {
      if (!err && res.code === 200) {
          const token = res.json().access_token;
          pm.environment.set("auth_token", token);
          console.log("Token received:", token);
      } else {
          console.log("Error fetching token:", err || res.status);
      }
  });
  ```
- **Request chính**: GET `https://api.example.com/users` với header `Authorization: Bearer {{auth_token}}`.
- **Kết quả**: Request chính sẽ sử dụng token từ biến `auth_token` để truy cập API.

- **Script trong Post-request Script** (chuỗi nhiều bước):
  ```javascript
  // Bước 1: Giả sử response từ request POST tạo user trả về user_id
  const userId = pm.response.json().id;
  pm.environment.set("new_user_id", userId);

  // Bước 2: Gửi request GET để lấy thông tin user vừa tạo
  pm.sendRequest({
      url: `https://api.example.com/users/${userId}`,
      method: "GET",
      header: {"Authorization": "Bearer " + pm.environment.get("auth_token")}
  }, (err, res) => {
      if (!err && res.code === 200) {
          console.log("User details:", res.json());
      } else {
          console.log("Error fetching user:", err || res.status);
      }
  });
  ```

#### Thực hành:
1. **Chuẩn bị**:
   - Tạo một collection với hai request:
     - Request 1: POST đến `https://jsonplaceholder.typicode.com/posts` để tạo bài viết mới:
       ```json
       {
         "title": "Test Post",
         "body": "This is a test",
         "userId": 1
       }
       ```
     - Request 2: GET đến `https://jsonplaceholder.typicode.com/posts/{{post_id}}`.
2. **Viết script trong Post-request Script của Request 1**:
   - Lấy `id` từ response và lưu vào biến `post_id`.
   - Gửi request GET để lấy chi tiết bài viết vừa tạo.
   ```javascript
   pm.test("Post created successfully", function () {
       pm.response.to.have.status(201);
   });

   const postId = pm.response.json().id;
   pm.environment.set("post_id", postId);
   console.log("New Post ID:", postId);

   pm.sendRequest({
       url: `https://jsonplaceholder.typicode.com/posts/${postId}`,
       method: "GET"
   }, (err, res) => {
       if (!err && res.code === 200) {
           console.log("Post details:", res.json());
       } else {
           console.log("Error:", err || res.status);
       }
   });
   ```
3. **Kiểm tra**:
   - Gửi Request 1, quan sát console log để xem dữ liệu từ cả hai request.
   - Gửi Request 2 để xác nhận biến `post_id` hoạt động đúng.

#### Cách mở rộng:
- **Sử dụng Collection Runner**: Kết hợp chaining với file dữ liệu để chạy chuỗi request cho nhiều bộ dữ liệu.
- **Xử lý lỗi**: Thêm điều kiện kiểm tra lỗi trong callback của `pm.sendRequest` để tăng độ tin cậy.
  ```javascript
  pm.sendRequest(..., (err, res) => {
      if (err || res.code !== 200) {
          pm.expect.fail("Request failed: " + (err || res.status));
      }
      // Tiếp tục xử lý
  });
  ```

### Lưu ý khi giảng dạy:
- **Giải thích từng bước**: Chia nhỏ quy trình (lấy dữ liệu → lưu biến → gửi request tiếp theo) để học viên dễ hiểu.
- **Thực hành là trọng tâm**: Sau mỗi ví dụ, yêu cầu học viên tự viết script để hiểu cách hoạt động.
- **Dùng console.log**: Khuyến khích học viên sử dụng `console.log` để debug và kiểm tra giá trị.
- **API công khai**: Sử dụng API như `jsonplaceholder.typicode.com` để thử nghiệm an toàn.

## 3. Visualization - Trực quan hóa dữ liệu trong Postman
### Mục tiêu:
- Học cách hiển thị dữ liệu response dưới dạng trực quan (bảng, biểu đồ).
- Tăng khả năng phân tích kết quả API.

### Nội dung chính:
- **Visualization là gì?**: Tính năng cho phép hiển thị dữ liệu từ response theo cách dễ đọc hơn bằng cách sử dụng script.
- **Công cụ**: Sử dụng tab "Visualize" trong Postman, kết hợp với script trong tab "Tests".
- **Ngôn ngữ hỗ trợ**: JavaScript (dùng thư viện như Handlebars để tạo HTML).

### Ví dụ:
- Gửi request GET đến API trả về dữ liệu order: https://bblib-dev-api.betterbytesvn.cloud/static/json/complex-data.json
- Trong tab "Tests", thêm script:
```javascript
  var template = `
    <style>
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
    <table>
        <tr>
            <th>Order ID</th>
            <th>Customer Name</th>
            <th>Total Amount</th>
            <th>Status</th>
        </tr>
        {{#each orders}}
        <tr>
            <td>{{order_id}}</td>
            <td>{{customer.name}}</td>
            <td>{{total_amount}}</td>
            <td>{{status}}</td>
        </tr>
        {{/each}}
    </table>
`;

const responseData = pm.response.json(); // Hoặc mock từ file JSON
pm.visualizer.set(template, { orders: responseData });
```
- Kết quả: Response hiển thị dưới dạng bảng trong tab "Visualize".

### Bổ sung: Nên Visualize Dữ liệu thế nào trong Postman
- **Các yếu tố cần xem xét khi chọn kiểu visualize**:
  1. **Loại dữ liệu**: Dữ liệu định tính (chuỗi, trạng thái) hay định lượng (số liệu, giá trị).
  2. **Mục đích**: So sánh, tổng hợp, hay hiển thị chi tiết.
  3. **Số lượng bản ghi**: Nhiều bản ghi cần tổng hợp hay ít bản ghi cần chi tiết.

### 3.1. Với loại dữ liệu nào, dùng kiểu visualize thế nào?
#### Dạng Table (Bảng)
- **Phù hợp với**:
  - Dữ liệu định tính hoặc hỗn hợp (chuỗi, số, trạng thái).
  - Hiển thị chi tiết từng bản ghi hoặc danh sách đầy đủ.
  - Dữ liệu có cấu trúc lồng nhau (nested) cần hiển thị phân cấp.
- **Ví dụ từ file JSON**:
  - Hiển thị danh sách đơn hàng với các cột: `Order ID`, `Customer Name`, `Total Amount`, `Status`.
  - Hiển thị chi tiết sản phẩm (`items`) trong mỗi đơn hàng.
- **Ưu điểm**: Dễ đọc, phù hợp khi cần xem toàn bộ thông tin.
- **Nhược điểm**: Không hiệu quả khi dữ liệu quá lớn hoặc cần so sánh xu hướng.

#### Dạng Chart (Biểu đồ)
- **Phù hợp với**:
  - Dữ liệu định lượng (số liệu như giá trị, số lượng).
  - Tổng hợp và so sánh dữ liệu (ví dụ: tổng doanh thu theo trạng thái, số lượng sản phẩm bán ra).
  - Dữ liệu cần phân tích xu hướng hoặc tỷ lệ.
- **Ví dụ từ file JSON**:
  - Biểu đồ cột: Tổng `total_amount` theo `status` (Shipped, Pending, Delivered, Processing).
  - Biểu đồ tròn: Phân bố số lượng đơn hàng theo quốc gia của khách hàng (`customer.contact.country`).
- **Ưu điểm**: Trực quan, dễ thấy xu hướng hoặc tỷ lệ.
- **Nhược điểm**: Không hiển thị chi tiết từng bản ghi, cần thư viện bên ngoài (như Chart.js).

---

### 3.2. Template mẫu tương ứng
Dựa trên file JSON `complex_data_extended.json` với 22 bản ghi, dưới đây là các template mẫu cho từng kiểu visualize.

#### Template 1: Table - Danh sách đơn hàng cơ bản
- **Mục đích**: Hiển thị toàn bộ thông tin đơn hàng dưới dạng bảng.
- **Script trong tab "Tests"**:
```javascript
var template = `
    <style>
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
    <table>
        <tr>
            <th>Order ID</th>
            <th>Customer Name</th>
            <th>Total Amount</th>
            <th>Status</th>
            <th>Order Date</th>
        </tr>
        {{#each orders}}
        <tr>
            <td>{{order_id}}</td>
            <td>{{customer.name}}</td>
            <td>{{total_amount}}</td>
            <td>{{status}}</td>
            <td>{{order_date}}</td>
        </tr>
        {{/each}}
    </table>
`;

const responseData = pm.response.json();
pm.visualizer.set(template, { orders: responseData });
```
- **Kết quả**: Bảng hiển thị 22 đơn hàng với các cột cơ bản.

#### Template 2: Table - Chi tiết đơn hàng với sản phẩm lồng nhau
- **Mục đích**: Hiển thị chi tiết từng đơn hàng, bao gồm danh sách sản phẩm (`items`) trong bảng lồng.
- **Script trong tab "Tests"**:
```javascript
var template = `
    <style>
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .nested-table { margin: 10px 0; width: 100%; }
    </style>
    <table>
        <tr>
            <th>Order ID</th>
            <th>Customer Name</th>
            <th>Items</th>
            <th>Total Amount</th>
        </tr>
        {{#each orders}}
        <tr>
            <td>{{order_id}}</td>
            <td>{{customer.name}}</td>
            <td>
                <table class="nested-table">
                    <tr><th>Item Name</th><th>Quantity</th><th>Price</th></tr>
                    {{#each items}}
                    <tr>
                        <td>{{name}}</td>
                        <td>{{quantity}}</td>
                        <td>{{price}}</td>
                    </tr>
                    {{/each}}
                </table>
            </td>
            <td>{{total_amount}}</td>
        </tr>
        {{/each}}
    </table>
`;

const responseData = pm.response.json();
pm.visualizer.set(template, { orders: responseData });
```
- **Kết quả**: Bảng chính hiển thị đơn hàng, mỗi đơn có bảng lồng chứa danh sách sản phẩm.

#### Template 3: Chart - Biểu đồ cột tổng doanh thu theo trạng thái
- **Mục đích**: Tổng hợp `total_amount` theo `status` và hiển thị dưới dạng biểu đồ cột (dùng Chart.js).
- **Script trong tab "Tests"**:
```javascript
// Tính tổng total_amount theo status
const responseData = pm.response.json();
const statusSummary = responseData.reduce((acc, order) => {
    acc[order.status] = (acc[order.status] || 0) + order.total_amount;
    return acc;
}, {});

const labels = Object.keys(statusSummary);
const data = Object.values(statusSummary);

var template = `
    <canvas id="myChart"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ${JSON.stringify(labels)},
                datasets: [{
                    label: 'Total Amount by Status',
                    data: ${JSON.stringify(data)},
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });
    </script>
`;

pm.visualizer.set(template);
```
- **Kết quả**: Biểu đồ cột với trục x là các trạng thái (Shipped, Pending, Delivered, Processing) và trục y là tổng `total_amount`.

#### Template 4: Chart - Biểu đồ tròn phân bố đơn hàng theo quốc gia
- **Mục đích**: Hiển thị tỷ lệ đơn hàng theo quốc gia của khách hàng (`customer.contact.country`).
- **Script trong tab "Tests"**:
```javascript
// Đếm số đơn hàng theo quốc gia
const responseData = pm.response.json();
const countryCount = responseData.reduce((acc, order) => {
    const country = order.customer.contact.country;
    acc[country] = (acc[country] || 0) + 1;
    return acc;
}, {});

const labels = Object.keys(countryCount);
const data = Object.values(countryCount);

var template = `
    <canvas id="myChart"></canvas>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        var ctx = document.getElementById('myChart').getContext('2d');
        var myChart = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: ${JSON.stringify(labels)},
                datasets: [{
                    label: 'Orders by Country',
                    data: ${JSON.stringify(data)},
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            }
        });
    </script>
`;

pm.visualizer.set(template);
```
- **Kết quả**: Biểu đồ tròn hiển thị tỷ lệ đơn hàng theo quốc gia (USA, UK, Japan, v.v.).
## 4. Body Data Type - Các loại dữ liệu trong Body của Request
### Mục tiêu:
- Hiểu sự khác biệt giữa các loại dữ liệu trong phần Body của request.
- Biết khi nào nên sử dụng từng loại.

### Nội dung chính:
#### 4.1. Form-data
- **Mô tả**: Dùng để gửi dữ liệu dạng key-value, hỗ trợ cả file upload.
- **Ứng dụng**: Tải file lên server, gửi biểu mẫu HTML có file đính kèm.
- **Ví dụ**: 
  - Key: `username`, Value: `john_doe`.
  - Key: `avatar`, Value: (chọn file ảnh).

#### 4.2. x-www-form-urlencoded
- **Mô tả**: Dữ liệu dạng key-value, được mã hóa URL, không hỗ trợ file.
- **Ứng dụng**: Gửi dữ liệu biểu mẫu đơn giản (không có file).
- **Ví dụ**: 
  - `username=john_doe&password=12345` (trong Body).

#### 4.3. Binary
- **Mô tả**: Gửi dữ liệu nhị phân (file) mà không cần key-value.
- **Ứng dụng**: Tải lên file đơn lẻ (ảnh, video, PDF, v.v.).
- **Ví dụ**: Chọn một file `.png` và gửi request POST.

### Thực hành:
1. Tạo 3 request POST đến `https://postman-echo.com/post`:
   - Request 1: Dùng `form-data` để gửi `name=John` và một file ảnh.
   - Request 2: Dùng `x-www-form-urlencoded` để gửi `name=Jane`.
   - Request 3: Dùng `binary` để gửi một file PDF.
2. Kiểm tra response từ server để hiểu cách dữ liệu được xử lý.


# API documentation
## Google Doc/ Google Sheet
## Postman Doc
## Open API

# Phụ lục
## 1. Run Collection with Data File - Chạy Collection với File Dữ liệu
### Mục tiêu:
- Tự động hóa việc gửi nhiều request với dữ liệu khác nhau từ file.
- Hiểu cách sử dụng Postman Collection Runner.

### Nội dung chính:
- **Collection Runner**: Công cụ chạy toàn bộ request trong collection với dữ liệu đầu vào từ file.
- **File dữ liệu hỗ trợ**: CSV hoặc JSON.
- **Cấu trúc file**:
  - **CSV**: Các cột là tên biến, mỗi dòng là một lần chạy.
    ```
    user_id,name
    1,John
    2,Jane
    ```
  - **JSON**: Mảng các object, mỗi object là một lần chạy.
    ```json
    [
      {"user_id": "1", "name": "John"},
      {"user_id": "2", "name": "Jane"}
    ]
    ```
- **Cách sử dụng biến**: Dùng `{{tên_biến}}` trong request.

### Ví dụ:
- Collection có request GET `{{base_url}}/users/{{user_id}}`.
- File CSV:
  ```
  user_id,name
  1,John
  2,Jane
  ```
- Chạy collection -> Postman gửi 2 request với `user_id` lần lượt là `1` và `2`.

### Thực hành:
1. Tạo collection với một request GET `https://jsonplaceholder.typicode.com/users/{{user_id}}`.
2. Tạo file CSV với 3 dòng dữ liệu (cột: `user_id`).
3. Mở Collection Runner, chọn file CSV, chạy và kiểm tra kết quả.
